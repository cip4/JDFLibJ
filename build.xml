<?xml version="1.0"?>
<!-- 
  3-mar-2006 FL: added project classpath to the JavaDoc target
                 debug="no", optimize="on"
                 added targets buildnumber, commons-copy, pack-bin
                 modified target dist to pack-src
                 javadocs now generated in dist/doc
                 set default target to "all"
-->
<project name="JDFLibJ" default="all" basedir=".">
	<description>Builds JDFLibJ.</description>
	<!-- Initializes -->
	<target name="-init" description="Initializes the build. This target is automatically run before building.">
		<echo>Initializing. Using build settings...</echo>
		<!-- Sets properties -->
		<echo>Make sure you have a directory named 'lib' containing the JAR files of the library dependencies (see lib/DEPENDENCIES.txt).</echo>
		<property name="lib.dir" value="./lib" />
		<tstamp />

		<property name="ant.build.javac.target" value="1.5" />

		<property file="version.properties"/>
		<property name="base.filename" value="JDFLibJ-${major.version}.${minor.version}" />		
		<property name="major.filename" value="JDFLibJ-${major.version}" />		
		<property name="jdflib.src.dir" value="./src" />
		<property name="apps.src.dir" value="./apps" />
		<property name="test.src.dir" value="./src/test/java" />
		<property name="test.tmp.dir" value="./src/test/resources/data/temp" />
		<property name="dist.dir" value="./dist" />
		<property name="doc.dir" value="${dist.dir}/doc" />
		<property name="bin.dir" value="${dist.dir}/bin" />
		<property name="build.debug" value="yes" />
		<property name="build.optimize" value="on" />
		<property name="verbose" value="true" />

		<!-- Sets class path -->
		<path id="project.class.path">
			<!--  <pathelement path="${java.class.path}" /> -->
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<!-- Creates directories -->
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${doc.dir}" />

		<!-- delete tmp directory -->
		<delete includeEmptyDirs="true">
				<fileset dir="${test.tmp.dir}" includes="**/*" />
		</delete>
	</target>

	<target name="buildnumber">
		<buildnumber />
		<echo message="Build number:${build.number}" />
	</target>

	<target name="common-prepare" depends="-init, buildnumber" description="Prepare common for all final targets">
		<copy todir="${dist.dir}">
			<fileset dir=".">
				<include name="Readme.txt" />
				<include name="Version.rtf" />
			</fileset>
		</copy>
		<!-- Update version number in readme -->
		<replace file="${dist.dir}/Readme.txt">
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
			<replacefilter token="@jdf.version@" value="${jdf.version}" />
			<replacefilter token="@jdflib.version@" value="${major.version}.${minor.version}.${build.number}" />
		</replace>
	</target>

	<target name="compile" depends="-init" description="Compiles the JDFLibJ source code.">
		<echo>Compiling...</echo>
		<javac encoding="UTF-8" destdir="${bin.dir}" debug="${build.debug}" optimize="${build.optimize}" target="1.5" source="1.5" failonerror="false">
			<src path="${jdflib.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
	</target>
	
	<target name="compileApps" depends="compile" description="Compiles the JDFLibJ source code.">
		<echo>Compiling...</echo>
		<javac encoding="UTF-8" destdir="${bin.dir}" debug="${build.debug}" optimize="${build.optimize}" target="1.5" source="1.5" failonerror="false">
			<src path="${apps.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="clean" depends="-init" description="Cleans the build.">
		<echo>Cleaning...</echo>
		<delete dir="${dist.dir}" />
	</target>

	<target name="jar" depends="compile, compileApps,  buildnumber" description="Builds a JAR archive containing the JDFLibJ binaries.">
		<jar destfile="${dist.dir}/${base.filename}.jar" basedir="${bin.dir}">
			<manifest>
				<attribute name="Main-Class" value="org.cip4.jdflib.CheckJDF" />
				<attribute name="Bundle-Name" value="JDFLibJ ${major.version}.${minor.version}.${build.number}" />
				<attribute name="Bundle-Vendor" value="CIP4" />
				<section name="JDFLibJ">
					<attribute name="JDF-Version" value="${jdf.version}" />
					<attribute name="JDFLib-Version" value="${major.version}.${minor.version}.${build.number}" />
					<attribute name="Build-Date" value="${DSTAMP}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<target name="major_jar" depends="jar" description="Builds a JAR archive containing the JDFLibJ binaries.">
		<copy file="${dist.dir}/${base.filename}.jar" tofile="${dist.dir}/${major.filename}.jar"/>
	</target>
	<target name="spam" depends="major_jar" description="Copy JDFLibJ binaries to the folders of depending CIP4 apps.">
		<copy tofile="../Bambi/src/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../JDFUtility/src/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../JDFEditor/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../elk/src/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../alces/src/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../DropFolder/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		<copy tofile="../PrintTalkJ/lib/${major.filename}.jar" file="${dist.dir}/${major.filename}.jar"/>
		
		<copy tofile="../Bambi/version.properties" file="version.properties"/>
		<copy tofile="../JDFUtility/version.properties" file="version.properties"/>
		<copy tofile="../JDFEditor/version.properties" file="version.properties"/>
		<copy tofile="../DropFolder/version.properties" file="version.properties"/>
		<copy tofile="../PrintTalkJ/version.properties" file="version.properties"/>
	</target>
	
	<target name="dist_all" depends="-init" description="builds lots of jars and wars and good things for distribution">
		<ant antfile="build.xml" dir="." target="clean"/>
		<ant antfile="build.xml" dir="." target="spam"/>
		<ant antfile="build.xml" dir="." target="all"/>
		<ant antfile="../alces/build.xml" dir="../alces" target="clean" inheritAll="false"/>
		<ant antfile="../alces/build.xml" dir="../alces" target="dist" inheritAll="false"/>
		<ant antfile="../JDFEditor/build.xml" dir="../JDFEditor" target="clean" inheritAll="false"/>
		<ant antfile="../JDFEditor/build.xml" dir="../JDFEditor" target="dist" inheritAll="false"/>
		<ant antfile="../JDFEditor/build.xml" dir="../JDFEditor" target="dist" inheritAll="false"/>
		<ant antfile="../JDFEditor/build.xml" dir="../JDFEditor" target="dmgappledist" inheritAll="false"/>
		<ant antfile="../DropFolder/build.xml" dir="../DropFolder" target="clean" inheritAll="false"/>
		<ant antfile="../DropFolder/build.xml" dir="../DropFolder" target="dist" inheritAll="false"/>
		<ant antfile="../Bambi/build-core.xml" dir="../Bambi" target="clean" inheritAll="false"/>
		<ant antfile="../Bambi/build-simworker.xml" dir="../Bambi" target="war" inheritAll="false"/>
		<ant antfile="../Bambi/build-proxy.xml" dir="../Bambi" target="war" inheritAll="false"/>
		<ant antfile="../Bambi/build-console.xml" dir="../Bambi" target="war" inheritAll="false"/>
		<ant antfile="../jdfutility/build.xml" dir="../jdfutility" target="war" inheritAll="false"/>
		<ant antfile="../jdfutility/build.xml" dir="../jdfutility" target="clean" inheritAll="false"/>			
	</target>

	<!--  ==================================================================================  -->
	<!--  ==================================================================================  -->


	<target name="doc" depends="-init, buildnumber" description="Builds the JDFLibJ Javadoc">
		<echo>Generating JavaDoc...</echo>
		<mkdir dir="${doc.dir}" />
		<javadoc destdir="${doc.dir}" sourcepath="${jdflib.src.dir}" version="true" private="yes" source="1.5" classpathref="project.class.path" use="true" notree="false" windowtitle="JDFLibJ-${jdflib.version}BLD${build.number}" nonavbar="false" noindex="false" splitindex="true" author="true" nodeprecatedlist="false" nodeprecated="false" additionalparam="-J-Xmx180m">

			<packageset dir="${jdflib.src.dir}" defaultexcludes="yes">
				<include name="**" />
			</packageset>
		</javadoc>
		<zip destfile="${dist.dir}/${base.filename}-doc.zip">
				<zipfileset dir="${doc.dir}"/>
		</zip>
	</target>


	<!--  ==================================================================================  -->
	<!--  Generates a ZIP which contains everything a developer needs to start using JDFLibJ -->
	<!--  i.e. JAR, JavaDoc, and all manually written documentation                           -->
	<!--  ==================================================================================  -->
	<!-- <target name="pack-bin" depends="common-prepare,jar,doc" description="Bundles a distribution of JDFLibJ binaries and Javadoc in a ZIP file"> -->
	<target name="pack-bin" depends="common-prepare,jar,major_jar" description="Bundles a distribution of JDFLibJ binaries and Javadoc in a ZIP file">
		<echo message="Building ${base.filename}-bin.zip" />
		<zip destfile="${dist.dir}/${base.filename}-bin.zip">
			<zipfileset dir="${doc.dir}" prefix="docs" />
			<zipfileset dir="${dist.dir}" includes="${base.filename}.jar" />
			<zipfileset dir="${dist.dir}" includes="${major.filename}.jar" />
			<zipfileset dir="${dist.dir}" includes="Readme.txt,Version.rtf" />
		</zip>
	</target>

	<!--  ======================================================================================  -->
	<!--  Generates a ZIP which contains everything a developer needs to further develop JDFLibJ -->
	<!--  i.e. all sources, build script and all manually written documentation                   -->
	<!--  ======================================================================================  -->
	<target name="pack-src" depends="common-prepare" description="Bundles a distribution of JDFLibJ source in a ZIP file.">
		<echo message="Building ${base.filename}-src.zip" />
		<zip destfile="${dist.dir}/${base.filename}-src.zip">
			<zipfileset dir="${jdflib.src.dir}" prefix="src">
				<include name="**/*.java" />
			</zipfileset>
			<zipfileset dir="${apps.src.dir}" prefix="apps">
				<include name="**/*.java" />
			</zipfileset>
			<zipfileset dir="${test.src.dir}" prefix="test">
				<include name="**/*" />
			</zipfileset>
			<zipfileset dir="${dist.dir}" includes="Readme.txt,Version.rtf" />
			<zipfileset dir="." includes="build.xml" />
		</zip>
	</target>

	<!--  ===================================================================  -->
	<!--  Builds and packages sources and binary distributions                 -->
	<!--  ===================================================================  -->
	<target name="all" depends="pack-bin,pack-src" />
	
	<target name="deploy-eval" depends="pack-bin">
		<delete dir="${basedir}/../evalApp/src/main/lib/">
			<include name="**/JDFLibJ*"/>
		</delete>

		<copy file="${dist.dir}/${base.filename}.jar" todir="${basedir}/../evalApp/src/main/lib" />
	</target>

	<target name="test" description="Runs JUnit tests." depends="compile">
		<property name="test.bin.dir" value="${bin.dir}/test" />
		<mkdir dir="${test.bin.dir}" />
		<property name="test.reports.dir" value="${bin.dir}/test-reports" />
		<mkdir dir="${test.reports.dir}" />
		<!-- Compile test cases -->
		<echo>Compiling unit tests...</echo>
		<javac destdir="${test.bin.dir}" debug="${build.debug}" target="1.5" source="1.5">
			<src path="${test.src.dir}" />
			<classpath refid="project.class.path" />
			<classpath path="${bin.dir}" />
			<include name="**/*" />
		</javac>
		<!-- Run test cases -->
		<echo>Running unit tests...</echo>
		<property name="test.working.dir" value="./" />
		<junit timeout="60000" dir="${test.working.dir}" fork="true" tempdir="${test.bin.dir}" failureproperty="test.failure" errorproperty="test.error">
			<formatter type="plain" />
			<formatter type="xml" />
			<classpath>
				<pathelement path="${java.class.path}" />
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${bin.dir}" />
				<pathelement path="${test.bin.dir}" />
				<pathelement path="${test.src.dir}" />
			</classpath>
			<batchtest fork="yes" todir="${test.reports.dir}">
				<fileset dir="${test.bin.dir}">
					<exclude name="org/cip4/jdflib/AllJDFLibTest.class" />
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<!-- Delete temp files -->
		<delete>
			<fileset dir="${test.working.dir}">
				<include name="temp*" />
				<include name="temp/*" />
			</fileset>
		</delete>
		<echo>Tests reports can be found in: ${test.reports.dir}</echo>
		</target>
		<target name="recode" depends="-init">
			<!--
			<mkdir dir="${jdflib.src.dir}/recode" />
			<mkdir dir="${jdflib.src.dir}/recode2" />
			<native2ascii encoding="Cp1252" reverse="false" src="${jdflib.src.dir}" 
				includes="**/*.java" dest="${jdflib.src.dir}/recode"/>
			<native2ascii encoding="UTF-8" reverse="true" src="${jdflib.src.dir}/recode" 
				includes="**/*.java" dest="${jdflib.src.dir}/recode2"/>
			-->
			<mkdir dir="${test.src.dir}/recode" />
			<mkdir dir="${test.src.dir}/recode2" />
			<native2ascii encoding="Cp1252" reverse="false" src="${test.src.dir}" 
				includes="**/*.java" dest="${test.src.dir}/recode"/>
			<native2ascii encoding="UTF-8" reverse="true" src="${test.src.dir}/recode" 
				includes="**/*.java" dest="${test.src.dir}/recode2"/>
	</target>

</project>
