import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'jacoco'
}

group = 'org.cip4.lib.jdf'
description = 'CIP4 JDF Writer Java'
version = project.hasProperty('projectVersion') ? project.projectVersion : '2.2.8.x-SNAPSHOT'
	configurations.all {
		exclude group: 'xml-apis', module: 'xml-apis'
	} 

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.description
                description = 'CIP4 JDF Library for JDF 1.x'
                url = 'https://github.com/cip4/JDFLibJ'

                organization {
                    name = "CIP4 Organization"
                    url = "https://www.cip4.org"
                }
                developers {
                    developer {
                        id = "rainer-prosi"
                        name = "Dr. Rainer Prosi"
                    }
                    developer {
                        id = "meiXXI"
                        name = "Stefan Meissner"
                    }
                }
                licenses {
                    license {
                        name = 'CIP4 Software License'
                        url = 'https://github.com/cip4/JDFLibJ/blob/master/LICENSE.md'
                    }
                }
                scm {
                    connection = 'https://github.com/cip4/JDFLibJ.git'
                    developerConnection = 'scm:git:https://github.com/cip4/JDFLibJ.git'
                    url = 'https://github.com/cip4/JDFLibJ'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusStaging {
    packageGroup = 'org.cip4'
    stagingProfileId = '105e2b532689c6'
    numberOfRetries = 400
    delayBetweenRetriesInMillis = 2500
    username ossrhUsername
    password ossrhPassword
}

repositories {
    mavenCentral()
}

signing {
    if (!version.endsWith("SNAPSHOT")) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    failOnError = false
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

processResources {
    filesMatching(['**/*.properties']) {
        filter(ReplaceTokens, tokens: [
                'name': project.properties['description'],
                'version': project.properties['version'],
                'artifactId': project.properties['name'],
                'timestamp': new Date().format('yyyy-MM-dd HH:mm:ssZ')
        ])
    }
}

dependencies {
    api 'commons-lang:commons-lang:2.6'
    api 'commons-io:commons-io:2.19.0'
    api 'commons-logging:commons-logging:1.3.5'
    api ('xerces:xercesImpl:2.12.2'){
	// exclude group: 'xml-apis'
	}
 	api 'com.sun.mail:jakarta.mail:2.0.1'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
    }
}

test {
    useJUnitPlatform()
    systemProperty "file.encoding", "utf-8"
    maxParallelForks = Math.max(1, Math.ceil(Runtime.getRuntime().availableProcessors() * 0.75))
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.description,
                "Implementation-Version": project.version,
                "Implementation-Vendor-Id": project.group,
                "Specification-Title": project.description,
                "Specification-Version": project.version,
                "Build-Jdk": JavaVersion.current(),
        )
    }
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
               TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
    }
}